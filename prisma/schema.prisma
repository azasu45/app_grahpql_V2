// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  prismaUtils  = true
  clientOutput = "@prisma/client"
  output       = "./pothos-types.d.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  complete      Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Perfil {
  id     String @id @default(cuid())
  nombre String @db.VarChar(20)
  cedula String @unique @db.Text

  userId String? @unique

  Grupo    Grupo[]
  Cobro    Cobro[]
  Pago     Pago[]
  Suscrito Pago[]  @relation(name: "PerfilSuscrito")

  @@index([userId])
}

model Grupo {
  id       String @id @default(cuid())
  perfilId String
  orden    Int
  nombre   String @db.VarChar(100)
  perfil   Perfil @relation(fields: [perfilId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Pago     Pago[]
}

model Cobro {
  id          String   @id @default(cuid())
  descripcion String   @db.VarChar(150)
  fecha       DateTime @default(now())
  monto       Decimal  @db.Money
  perfilId    String
  perfil      Perfil   @relation(fields: [perfilId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pagos       Pago[]
}

model Pago {
  id             String   @id @default(cuid())
  perfilId       String
  suscritoId     String
  cobroId        String?
  grupoId        String?
  fecha          DateTime @default(now())
  monto          Decimal  @db.Money
  referencia     String   @db.VarChar(20)
  refAdmin       String   @db.VarChar(20)
  estado         Int      @db.SmallInt
  captureImg     String
  Observacion    String   @db.VarChar(100)
  perfilPago     Perfil   @relation(fields: [perfilId], references: [id])
  perfilSuscrito Perfil   @relation(name: "PerfilSuscrito", fields: [suscritoId], references: [id])
  grupo          Grupo?   @relation(fields: [grupoId], references: [id], onDelete: SetNull)
  cobro          Cobro?   @relation(fields: [cobroId], references: [id], onDelete: SetNull)
}
